<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/kotlin/${packageName}/${moduleName}/service/${subModuleName}</filePath>
	<fileName>${ClassName}Service.kt</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>;

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import com.fy.erp.common.service.enu.NextOperation
import com.fy.erp.common.persistence.Page
import com.fy.erp.common.service.CrudService
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}
import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dao
<#list table.childList as c>
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${c.className?cap_first}
import ${packageName}.${moduleName}.dao<#if subModuleName != "">.${subModuleName}</#if>.${c.className?cap_first}Dao
</#list>

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@Transactional(readOnly = true)
class ${ClassName}Service : CrudService<${ClassName}Dao, ${ClassName}>() {

	<#list table.childList as c>
	@Autowired
	lateinit var ${c.className?uncap_first}Dao: ${c.className?cap_first}Dao
	</#list>

	override fun get(id: String): ${ClassName} {
        val ${className} = super.get(id)
        <#list table.childList as c>
		${className}.${c.className?uncap_first}List = ${c.className?uncap_first}Dao.findList(${c.className?cap_first}(${className}))
		</#list>
        return ${className}
    }

	override fun findList(${className}: ${ClassName}): List<${ClassName}> {
        return super.findList(${className})
    }

	override fun findPage(page: Page<${ClassName}>, ${className}: ${ClassName}): Page<${ClassName}> {
        return super.findPage(page, ${className})
    }

	@Transactional(readOnly = false)
    override fun save(${className}: ${ClassName}): Int {
        super.save(${className})
    <#list table.childList as c>
		return ${className}.${c.className?uncap_first}List.map { child ->
			when (getNextOperation(child)!!) {
				NextOperation.INSERT -> { // 插入的情况
					child.${className} = ${className}
					child.preInsert()
					${c.className?uncap_first}Dao.insert(child)
				}
				NextOperation.UPDATE -> {  // 更新的情况
					child.preUpdate()
					${c.className?uncap_first}Dao.update(child)
				}
				NextOperation.DELETE -> { //删除的情况
					${c.className?uncap_first}Dao.delete(child)
				}
			}
		}.sumBy { it } /* */
     </#list>
    }

	@Transactional(readOnly = false)
    override fun delete(${className}: ${ClassName}): Int {
        super.delete(${className})
    <#list table.childList as c>
        return ${c.className?uncap_first}Dao.delete(${c.className?cap_first}(${className}))
	</#list>
    }

	// ========================================================================================

}]]>
	</content>
</template>